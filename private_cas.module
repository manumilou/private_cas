<?php

/**
 * @file
 * It allows users to mark individual nodes as private.
 * Users authenticated with CAS can
 * read these nodes, while others cannot.
 */

define('PRIVATE_CAS_DISABLED', 0);
define('PRIVATE_CAS_ALLOWED', 1);
define('PRIVATE_CAS_AUTOMATIC', 2);
define('PRIVATE_CAS_ALWAYS', 3);
define('PRIVATE_CAS_GRANT_ALL', 1);


/**
 * Implements hook_permission().
 */
function private_cas_permission() {
  return array(
    'mark content as private' => array(
      'title' => t('Mark content as private'),
      'description' => t('Make content only viewable by people authenticated with cas'),
    ),
    'bypass cas protection' => array(
      'title' => t('Bypass CAS protection'),
      'description' => t('Bypass CAS protection for protected content.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function private_cas_menu() {
  $items = array();

  $items['admin/config/people/private_cas'] = array(
    'title' => 'Private (CAS)',
    'description' => "",
    'access arguments' => array('administer site'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('private_cas_general_settings'),
    'file' => 'private_cas.admin.inc',
    'file path' => drupal_get_path('module', 'private_cas'),
  );
  return $items;
}

/**
 * Implements hook_init().
 */
function private_cas_init() {
  // Let Drush bypass password protection.
  if (function_exists('drush_main')) {
    return;
  }

  if(user_access('bypass cas protection')) {
    return;
  }

  // Check first if we are dealing with a node
  if(arg(0) == 'node' && is_numeric(arg(1))) {
    $node = node_load(arg(1));
    // Is this node type supposed to be protected?
    if(variable_get('private_cas_' . $node->type, PRIVATE_CAS_DISABLED) && isset($node->private_cas) && $node->private_cas == 1){
      // Protect only the view operation
      if(arg(2) == NULL) {
        private_cas_auth($node);
      }
    }
  }
}

/**
 * Implements hook_form_alter().
 *
 * This module adds a simple checkbox to the node form labeled private. If the
 * checkbox is labelled, only the node author and users authenticated with CAS
 * may see it.
 */
function private_cas_form_alter(&$form, &$form_state, $form_id) {
  if (!empty($form['#node_edit_form'])) {
    $node = $form['#node'];
    $default = variable_get('private_cas_' . $node->type, PRIVATE_CAS_DISABLED);

    if ($default != PRIVATE_CAS_DISABLED || !empty($node->private_cas)) {
      if (empty($node->nid)) {
        $privacy = ($default > PRIVATE_CAS_ALLOWED);
      }
      else {
        $privacy = isset($node->private_cas) ? $node->private_cas : 0;
      }

      if (user_access('mark content as private') && $default != PRIVATE_CAS_ALWAYS) {
        $cas_groups = isset($node->cas_groups) ? $node->cas_groups : '';

        $form['private_cas'] = array(
          '#type' => 'fieldset',
          '#title' => t('Privacy (CAS)'),
          '#collapsible' => TRUE,
          '#group' => 'additional_settings',
          '#attributes' => array(
            'class' => array('private-cas-form'),
          ),
          '#attached' => array(
            'js' => array(/*drupal_get_path('module', 'media_url') . '/copy.js'*/),
          ),
          '#access' => user_access('mark content as private'),
          '#weight' => -30,
          '#tree' => TRUE,
        );

        $form['private_cas']['private'] = array(
          '#type' => 'checkbox',
          '#title' => t('Make this post private'),
          '#description' => t('When checked, only users authenticated with CAS will be able to see this post.'),
          '#attributes' => array('title' => t('When checked, only users authenticated with CAS will be able to see this post.')),
          '#default_value' => $privacy,
        );
        $form['private_cas']['cas_groups'] = array(
          '#type' => 'textarea',
          '#rows' => 5,
          '#title' => t('CAS groups to grant access to'),
          '#description' => t('If no group is specified, access will be granted to all CAS groups.'),
          '#default_value' => json_decode($cas_groups),
        );
      }
      else {
        $form['private_cas']['private'] = array(
          '#type' => 'value',
          '#value' => $privacy,
        );
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function private_cas_form_node_type_form_alter(&$form, &$form_state, $form_id) {
  if (isset($form['type'])) {
    $form['workflow']['private_cas'] = array(
      '#type' => 'radios',
      '#title' => t('Privacy (CAS)'),
      '#options' => array(
        PRIVATE_CAS_DISABLED => t('Disabled (always public)'),
        PRIVATE_CAS_ALLOWED => t('Enabled (public by default)'),
        PRIVATE_CAS_AUTOMATIC => t('Enabled (private by default)'),
        PRIVATE_CAS_ALWAYS => t('Hidden (always private)'),
      ),
      '#default_value' => variable_get('private_cas_' . $form['#node_type']->type, PRIVATE_CAS_DISABLED),
    );
  }
}

/**
 * Implements hook_node_load().
 */
function private_cas_node_load($nodes, $types) {
  $result = db_query('SELECT * FROM {private_cas} WHERE nid IN(:nids)', array(':nids' => array_keys($nodes)));
  foreach ($result as $record) {
    $nodes[$record->nid]->private_cas = $record->private_cas;
    $nodes[$record->nid]->cas_groups = $record->cas_groups;
  }
}

/**
 * Implements hook_node_delete().
 */
function private_cas_node_delete($node) {
  db_delete('private_cas')
    ->condition('nid', $node->nid)
    ->execute();
}

/**
 * Implements hook_node_insert().
 */
function private_cas_node_insert($node) {
  private_cas_node_update($node);
}

/**
 * Implements hook_node_update().
 */
function private_cas_node_update($node) {
  if (isset($node->private_cas)) {
    db_merge('private_cas')
      ->key(array('nid' => $node->nid))
      ->fields(array(
        'nid' => $node->nid,
        'private_cas' => (int)$node->private_cas['private'],
        'cas_groups' => $node->private_cas['cas_groups'],
      ))
      ->execute();

    $vars = array(
      '@type' => node_type_get_name($node),
      '%title' => $node->title,
      '%private' => !empty($node->private_cas) ? t('Yes') : t('No'),
    );
    drupal_set_message(t('@type %title has private set to "%private".', $vars));
  }
}

/**
 * Implements hook_node_view().
 */
function private_cas_node_view($node, $view_mode) {
  if (isset($node->private_cas) && $node->private_cas == 1) {
    $links['private_cas_icon']['title'] = theme('private_cas_node_link');
    $links['private_cas_icon']['html'] = TRUE;
    $node->content['links']['private_cas'] = array(
      '#theme' => 'links__node__private_cas',
      '#links' => $links,
      '#attributes' => array('class' => array('links', 'inline')),
    );
  }
}

/**
 * Implements hook_theme().
 */
function private_cas_theme() {
  return array(
    'private_cas_node_link' => array(
      'variables' => array(),
    ),
  );
}

/**
 * Custom theme function
 * @see private_cas_theme()
 */
function theme_private_cas_node_link() {
  $vars = array(
    'path' => drupal_get_path('module', 'private_cas') . '/lock_confirmed.png',
    'width' => '24',
    'height' => '24',
    'alt' => t('Private CAS'),
    'title' => t('This content is private.')
  );
  return theme('image', $vars);
}

/**
 * Authenticate against CAS.
 */
function private_cas_auth($node) {
  if(!cas_phpcas_load()) {
    return;
  }

  dd($node);

  // Start a drupal session
  drupal_session_start();
  _cas_single_sign_out_save_ticket();  // We use this later for CAS 3 logoutRequests

  // Initialize phpCAS.
  cas_phpcas_init();

  $validate_url = variable_get('cas_service_validate_url', NULL);
  if($validate_url) {
    phpCAS::setServerServiceValidateURL($validate_url);
  }

  $force_authentication = TRUE;
  // Force the authentication
  if ($force_authentication) {
    phpCAS::forceAuthentication();
    // $groups = _mock_cas_response_groups();
    $groups = phpCAS::getAttribute('group');
    dd($groups);
    // Check user groups and compare with the groups allowed to access the node
    $allowed_groups = explode(';', $node->cas_groups);
    foreach($allowed_groups as $allowed_group) {
      if(in_array($allowed_group, $groups)) {
        // If we found a matching group, break out of the loop.
        break;
      }
      drupal_access_denied();
      exit();
    }
  }
  else {
    $logged_in = phpCAS::checkAuthentication();

    // We're done cause we're not logged in.
    if (!$logged_in) {
      drupal_access_denied();
      exit();
    }
  }
  return TRUE;
}

function _mock_cas_response_groups() {
  return array('CAS_GROUP_STUDENTS_MTA');
}
